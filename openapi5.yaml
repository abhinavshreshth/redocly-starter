openapi: 3.0.0
servers:
  - url: https://wss1.mtsp.co.in:16107
info:
  description: |
    This is the REST API documentation for the MTS application. You can learn more about API by visiting [multitradesoftech.com/](https://www.multitradesoftech.com/). Please contact in this number +91 8980983000 to obtain API & Secret Key. To test the authorization filters for this sample, you can utilize provided API_key and secret_key.
    
    # Introduction

    This API is documented and designed to facilitate algorithmic trading activities. It incorporates standard REST API principles to enable seamless communication between trading applications and the underlying platform. The structure of the API is based on the Multitrade sample provided by our team. Additionally, it has been extended to showcase the capabilities of the API tool and leverage MTS documentation. In addition to adhering to standard REST API syntax, the API also utilizes a few vendor extensions to enhance its functionality.
    
    # Specification

    The API follows the REST API format and is specifically designed to support algorithmic trading activities. It provides comprehensive documentation on endpoints, request/response formats, and authentication mechanisms, making it easy for developers to integrate with trading applications.
    
    # Versions and Dependencies

    |   Language |   Version                                                      |   Required Libraries/Packages                                                                                             |
    |---------------|--------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------|
    |           Python |   v3.10.12                                                | requests (v2.31.0), json, websockets (v12.0), asyncio (v3.4.3), nest_asyncio (v1.6.0), ssl                                                |
    |            Node.js |   v20.11.1                                       | axios (v1.6.7), websockets (v8.16.0)                                   |


    # Common Errors

    |   Status_Code |   Description                                                      |   Example Response                                                                                              |
    |---------------|--------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------|
    |           401 |   Invalid AccessToken                                                | {"status": "unsuccessful", "data": {"error": "Invalid AccessToken"}}                                                 |
    |           410 |   Application Not Active                                       | {"status": "unsuccessful", "data": {"error": "Application Not Active"}}                                   |
    |           404 |   Application Not Found                                    | {"status": "unsuccessful", "data": {"error": "Application Not Found"}}                  |
    |           500 |   Api Server Not Connected                                         | {"status": "unsuccessful", "data": {"error": "Api Server Not Connected"}}                                             |
    |           409 |   Invalid API version 3 needed                                   | {"status": "unsuccessful", "data": {"error": "Invalid API version 3 needed"}}                                                          |
    |           405 |   Invalid Method                                                  | {"status": "unsuccessful", "data": {"error": "Invalid Method"}}             |
    |           404 |   Wrong Request please check path                                   | {"status": "unsuccessful", "data": {"error": "Wrong Request please check path"}}                |
    |           429 |   Msg rate limit exceeded                                    | {"status": "unsuccessful", "data": {"error_text": "Message rate limit has exceeded by it's limit"}}                                        |
    
    # Authentication

    MTS API offers combination of two forms of authentication:
      - API Key
      - SecretKey 


    <!-- ReDoc-Inject: <security-definitions> -->
  version: 3.0.0
  title: Multitrade REST API Document
  termsOfService: https://www.multitradesoftech.com/index.html/terms/
  contact:
    name: API Support
    email: info@multitradesoftech.com
    url: https://www.multitradesoftech.com/
  x-logo:
    url: https://raw.githubusercontent.com/abhinavshreshth/Temp/main/mtslogo.png
    altText: Multitrade logo
  license:
    name: 'License: Apache 2.0'
    url: http://www.apache.org/licenses/LICENSE-2.0.html
externalDocs:
  description: Find out how you can setup our REST API.
  url: >-
    https://api.whatsapp.com/send/?phone=%2B918980983000&text&type=phone_number&app_absent=0/

tags:
  - name: Broadcast
    description: |
        The WebSocket API is the most efficient (speed, latency, resource consumption, and bandwidth) way to receive quotes for instruments across all exchanges during live market hours. A quote consists of fields such as open, high, low, close, last traded price, 5 levels of bid/offer market depth data etc

        **Establishing WebSocket connection**

        To achieve the equivalent WebSocket connection in Python, you can use the websockets library. Here's how you can do it:
        
        `Python`

          ```
          import asyncio
          import websockets

          async def connect_to_server():
              async with websockets.connect('wss://wss1.mtsp.co.in:16108') as websocket:
                  response = await websocket.recv()
                  if "HandShake" in response:
                      print("WebSocket connection successful!")
                  else:
                      print("WebSocket connection failed")

          asyncio.run(connect_to_server())

              
          ```

        `Node.js`

          ```

          const WebSocket = require('ws');

          async function connectToServer() {
              const websocket = new WebSocket('wss://wss1.mtsp.co.in:16108');

              websocket.on('message', function(message) {
                  if (message.includes('HandShake')) {
                      console.log('WebSocket connection successful!');
                  } else {
                      console.log('WebSocket connection failed');
                  }
                  websocket.close();
              });
          }

          connectToServer();


          ```

        It awaits a message (response) from the server using websocket.recv(). If the received message contains the substring "HandShake", it prints "WebSocket connection successful!" indicating that the handshake process was successful.
        If the message does not contain "HandShake", it prints "WebSocket connection failed".
        

        
        # Broadcast Request

        The script establishes a WebSocket connection to a server, sends a "Broadcast" message upon receiving a handshake, and processes and prints the received broadcast messages containing market data.
        
        **Request Structure -**
        
        {"Message": "Broadcast",

        "EXC": "NSECM",

        "SECID": "3045"}


        `Python`

          ```
          import asyncio
          import websockets

          async def connect_to_server():
              async with websockets.connect('wss://wss1.mtsp.co.in:16108') as websocket:
                  response = await websocket.recv()
                  if "HandShake" in response:
                    
                      sc = "{\"Message\":\"Broadcast\",\"EXC\":\"NSECM\",\"SECID\":\"3045\"}"
                      await websocket.send(sc)
                      response = await websocket.recv()
                      if "\"Broadcast\"" in response:
                            print(response)
                  else:
                      print("WebSocket connection failed")

          asyncio.run(connect_to_server())
              
          ```

        `Node.js`

          ```

          const WebSocket = require('ws');

          async function connect() {
              const ws = new WebSocket('wss://wss1.mtsp.co.in:16108');

              ws.on('open', () => ws.send('{"Message":"Broadcast","EXC":"NSECM","SECID":"3045"}'));
              ws.on('message', data => {
                  if (data instanceof Buffer) {
                      // Convert binary buffer to string
                      data = data.toString('utf-8');
                  }
                  console.log(data.includes('"Broadcast"') ? data : 'WebSocket connection failed');
              });
          }

          connect();



          ```

        Upon receiving a response to this broadcast message, it checks if the response contains "Broadcast". If so, it prints the entire response.
        The broadcast response itself is a JSON object containing various fields related to market data. 
        Broadcast response comes in json format, which can further be pursed according to the need and requirement.

        # Response
        JSON Output - 
          ```
            {
                "Message": "Broadcast",
                "EXC": "NSECM",
                "SECID": "3045",
                "BT": "1709113203",
                "B": [
                    {
                        "P": "743.45",
                        "Q": "91",
                        "C": "4"
                    },
                    {
                        "P": "743.40",
                        "Q": "2453",
                        "C": "8"
                    },
                    {
                        "P": "743.35",
                        "Q": "26",
                        "C": "3"
                    },
                    {
                        "P": "743.30",
                        "Q": "2327",
                        "C": "16"
                    },
                    {
                        "P": "743.25",
                        "Q": "316",
                        "C": "8"
                    }
                ],
                "A": [
                    {
                        "P": "743.50",
                        "Q": "11",
                        "C": "1"
                    },
                    {
                        "P": "743.55",
                        "Q": "267",
                        "C": "4"
                    },
                    {
                        "P": "743.65",
                        "Q": "1500",
                        "C": "1"
                    },
                    {
                        "P": "743.70",
                        "Q": "11",
                        "C": "1"
                    },
                    {
                        "P": "743.75",
                        "Q": "2530",
                        "C": "7"
                    }
                ],
                "TQT": "10120104",
                "LTP": "743.50",
                "LTQ": "12",
                "LTT": "1709113203",
                "VWAP": "748.39",
                "TBQTY": "609120",
                "TSQTY": "1216842",
                "O": "749.85",
                "H": "756.75",
                "L": "741.00",
                "C": "749.85",
                "OI": "0",
                "LL": "501.55",
                "LH": "777.50",
                "TV": "75737.85"
            }

          ```
        The broadcast response itself is a JSON object containing various fields related to market data. Here's a breakdown of the structure:
        - "EXC": Represents the exchange where the security is traded (e.g., "NSECM").
        - "SECID": Represents the security identifier.
        - "BT": Broadcast time.
        - "B": 5 Array of Buy Side Depth. containing objects with price ("P"), quantity ("Q"), and Order Count ("C").
        - "A": 5 Array of Sell Side Depth
        - "TQT": Total quantity traded.
        - "LTP": Last traded price.
        - "LTQ": Last traded quantity.
        - "LTT": Last traded time.
        - "VWAP": Volume weighted average price.
        - "TBQTY": Total buy quantity.
        - "TSQTY": Total sell quantity.
        - "O": Open price.
        - "H": High price.
        - "L": Low price.
        - "C": Close price.
        - "OI": Open interest.
        - "LL": Life low.
        - "LH": Life high.
        - "TV": Total value traded.

        **Parsing Live VWAP value (From Broadcast)**

        This is the sample code for getting live VWAP out of broadcast message. Similarly we can all other like the Volume Last trded price (LTP), Last Traded Quantity (LTQ), Close price(C), and more. 
        It's all about finding the right names for these values in the JSON data and adjusting the script accordingly. With a bit of tweaking, you can easily fetch and keep an eye on various live market statistics that matter to you.

        `Python`


          ```
          import asyncio
          import websockets

          async def connect_to_server():
              async with websockets.connect('wss://wss1.mtsp.co.in:16108') as websocket:
                  response = await websocket.recv()
                  if "HandShake" in response:

                      sc = "{\"Message\":\"Broadcast\",\"EXC\":\"NSECM\",\"SECID\":\"3045\"}"
                      await websocket.send(sc)

                  OldVWAP = -1
                  while True:
                      response = await websocket.recv()
                      if "\"Broadcast\"" in response:
                          response_string = response
                          responses = response_string.strip().split("\n\n")

                      for res in responses:
                          data = json.loads(res)
                          if "LTP" in data:
                              if (OldVWAP != data["VWAP"] ):
                                OldVWAP = data["VWAP"]
                                print("VWAP:", data["VWAP"])

          asyncio.run(connect_to_server())
              
          ```

        `Node.js`

          ```

          const WebSocket = require('ws');

          async function connectToServer() {
              const ws = new WebSocket('wss://wss1.mtsp.co.in:16108');

              ws.on('open', async () => {
                  const sc = '{"Message":"Broadcast","EXC":"NSECM","SECID":"3045"}';
                  await ws.send(sc);
              });

              let oldVWAP = -1;
              ws.on('message', data => {
                  const response = data.toString(); 
                  if (response.includes('"VWAP"')) {
                      const responses = response.trim().split("\n\n");

                      for (const res of responses) {
                          try {
                              const jsonData = JSON.parse(res);
                              if (jsonData["VWAP"] && oldVWAP !== jsonData["VWAP"]) {
                                  oldVWAP = jsonData["VWAP"];
                                  console.log("VWAP:", jsonData["VWAP"]);
                              }
                          } catch (error) {
                              console.error('Error parsing JSON:', error);
                          }
                      }
                  }
              });
          }

          connectToServer().catch(console.error);



          ```
        


        Output:

          ```

          VWAP: 766.44
          VWAP: 766.45
          VWAP: 766.46
          VWAP: 766.47
          VWAP: 766.48
          VWAP: 766.51
          VWAP: 766.52
          VWAP: 766.53
          VWAP: 766.54
          VWAP: 766.62
          VWAP: 766.76
          .
          .
          .
          and so on


          ```

        VWAP is crucial in stock trading, showing the average price weighted by volume. Traders rely on it to gauge fair value, decide on trades, and minimize market impact. It's especially handy for intraday analysis and algorithmic trading, offering a key reference point for efficient market navigation.



  - name: LTP
    description: |
        It is the Last Traded Price at which a security was traded on an exchange. It provides a real-time snapshot of a security's valuation, guiding investment decisions and trading strategies based on current market sentiment.
        # LTP Request
        **Request Structure -**
        
        { "Message": "LTP",

        "EXC": "NSEFO",

        "SECID": "35020" }

        `Python`

          ```

          import asyncio
          import websockets

          async def connect_to_server():
              async with websockets.connect('wss://wss1.mtsp.co.in:16108') as websocket:
                  response = await websocket.recv()
                  if "HandShake" in response:
                    
                      sc = "{\"Message\":\"LTP\",\"EXC\":\"NSEFO\",\"SECID\":\"35020\"}"
                      await websocket.send(sc)
                      while True:
                        response = await websocket.recv()
                        if "\"LTP\"" in response:
                          print(response)
                  else:
                      print("WebSocket connection failed")

          asyncio.run(connect_to_server())

          ```

        `Node.js`

          ```
          const WebSocket = require('ws');

          async function connect() {
              const ws = new WebSocket('wss://wss1.mtsp.co.in:16108');

              ws.on('open', () => ws.send('{"Message":"LTP","EXC":"NSEFO","SECID":"35020"}'));
              ws.on('message', data => {
                  if (data instanceof Buffer) {
                      // Convert binary buffer to string
                      data = data.toString('utf-8');
                  }
                  console.log(data.includes('"LTP"') ? data : 'WebSocket connection failed');
              });
          }

          connect();

          ```

        
        # Response
        JSON Output - 
          ```
          {
              "Message": "LTP",
              "EXC": "NSEFO",
              "SECID": "35020",
              "LTP": "20915.00"
          }

          ```
        LTP Response structure:

        - Message: LTP
        - EXC: Represents the exchange where the security is traded (e.g., "NSEFO").
        - SECID: Represents the security identifier.
        - LTP: Last traded price.

  - name: OHLCL
    description: |
        OHLCL stands for Open, High, Low, Close. It's a set of data points commonly used in financial markets to summarize the trading activity of a security over a given period. This data is essential for technical analysis, charting, and understanding market trends.
        # OHLCL Request
        **Request Structure -**
        
        {"Message": "OHLCL",

        "EXC": "NSEFO",

        "SECID": "35707"}


        `Python`

          ```

          import asyncio
          import websockets

          async def connect_to_server():
              async with websockets.connect('wss://wss1.mtsp.co.in:16108') as websocket:
                  response = await websocket.recv()
                  if "HandShake" in response:
                    
                      sc = "{\"Message\":\"OHLCL\",\"EXC\":\"NSEFO\",\"SECID\":\"35707\"}"
                      await websocket.send(sc)
                      while True:
                        response = await websocket.recv()
                        if "\"OHLCL\"" in response:
                          print(response)
                  else:
                      print("WebSocket connection failed")

          asyncio.run(connect_to_server())

          ```

        `Node.js`

          ```
          const WebSocket = require('ws');

          async function connect() {
              const ws = new WebSocket('wss://wss1.mtsp.co.in:16108');

              ws.on('open', () => ws.send('{"Message":"OHLCL","EXC":"NSEFO","SECID":"35707"}'));
              ws.on('message', data => {
                  if (data instanceof Buffer) {
                      // Convert binary buffer to string
                      data = data.toString('utf-8');
                  }
                  console.log(data.includes('"OHLCL"') ? data : 'WebSocket connection failed');
              });
          }

          connect();

          ```

        
        # Response
        JSON Output - 

          ```
          {
              "Message": "OHLCL",
              "EXC": "NSEFO",
              "SECID": "35707",
              "O": "11015.00",
              "H": "11099.25",
              "L": "11013.10",
              "C": "10985.00",
              "LTP": "11092.05"
          }

          ```

        OHLCL response structure:

        - Message: OHLCL
        - EXC: Represents the exchange where the security is traded (e.g., "NSEFO").
        - SECID: Represents the security identifier.
        - O: Open price.
        - H: High price.
        - L: Low price.
        - C: Close price.
        - LTP: Last traded price.

  - name: Watch
    description: |
        The provided data includes essential information for tracking securities in financial markets. It covers details such as the exchange where the security is traded, its unique identifier, and recent trading activity. Other important data points encompass the total quantity and value traded, along with prices at the open, high, low, and close of trading sessions. Additionally, it includes timestamps for the last trade and broadcast, as well as open interest and volume-weighted average price. These details are vital for investors and traders to monitor market movements and make informed decisions.
        # Watch Request
        **Request Structure -**
        
        { "Message": "Watch",

        "EXC": "NSEFO",

        "SECID": "71441" }

        `Python`

          ```

          import asyncio
          import websockets

          async def connect_to_server():
              async with websockets.connect('wss://wss1.mtsp.co.in:16108') as websocket:
                  response = await websocket.recv()
                  if "HandShake" in response:
                    
                      sc = "{\"Message\":\"Watch\",\"EXC\":\"NSEFO\",\"SECID\":\"71441\"}"
                      await websocket.send(sc)
                      while True:
                        response = await websocket.recv()
                        if "\"Watch\"" in response:
                          print(response)
                  else:
                      print("WebSocket connection failed")

          asyncio.run(connect_to_server())

          ```

        `Node.js`

          ```
          const WebSocket = require('ws');

          async function connect() {
              const ws = new WebSocket('wss://wss1.mtsp.co.in:16108');

              ws.on('open', () => ws.send('{"Message":"Watch","EXC":"NSEFO","SECID":"71441"}'));
              ws.on('message', data => {
                  if (data instanceof Buffer) {
                      // Convert binary buffer to string
                      data = data.toString('utf-8');
                  }
                  console.log(data.includes('"Watch"') ? data : 'WebSocket connection failed');
              });
          }

          connect();

          ```

        
        # Response
        JSON Output -

          ```
          {
              "Message": "Watch",
              "EXC": "NSEFO",
              "SECID": "71441",
              "LTP": "22287.55",
              "LTQ": "50",
              "BP": "22285.05",
              "BQ": "50",
              "SP": "22287.05",
              "SQ": "250",
              "TQT": "1495350",
              "TV": "332965.69659000001",
              "BT": "1708663448",
              "LLT": "1708663447",
              "VWAP": "22266.74",
              "OI": "11420900",
              "O": "22285.10",
              "H": "22344.45",
              "L": "22235.10",
              "C": "22243.25"
          }

          ```

        Watch response structure:

        - Message: Watch
        - EXC: Represents the exchange where the security is traded (e.g., "NSEFO").
        - SECID: Represents the security identifier.
        - LTP: Last traded price.
        - LTQ: Last traded quantity.
        - BP: (L-1) Bid Price.
        - BQ: (L-1) Bid Quantity.
        - SP: Sell Price.
        - SQ: Sell Quantity.
        - TQT: Total quantity traded.
        - TV: Total value traded.
        - BT: Broadcast time.
        - LLT: Last trade time.
        - VWAP: Volume Weighted Average Price.
        - OI: Open interest.
        - O: Open price.
        - H: High price.
        - L: Low price.
        - C: Close price.


  - name: WS Login

    description: |
    
        `Python`

        ```


        import asyncio
        import websockets

        async def connect_to_server():
            async with websockets.connect('wss://wss1.mtsp.co.in:16107') as websocket:
                sc = "{\"Message\":\"Login\",\"API_KEY\":\".KAoiU$GCfrrNDN4H|qq<<XtG\",\"REQUEST_TOKEN\":\"9uGleQ4keI9zL!3oZ.9d\"}"
                await websocket.send(sc)
                while True:
                  response = await websocket.recv()
                  print( response )
                return

        asyncio.run(connect_to_server())

        ```

        `Node.js`

        ```

        const WebSocket = require('ws');

        async function connectToServer() {
            const ws = new WebSocket('wss://wss1.mtsp.co.in:16107');

            ws.on('open', function open() {
                const sc = "{\"Message\":\"Login\",\"API_KEY\":\".KAoiU$GCfrrNDN4H|qq<<XtG\",\"REQUEST_TOKEN\":\"9uGleQ4keI9zL!3oZ.9d\"}";
                ws.send(sc);
            });

            ws.on('message', function incoming(data) {
                console.log(data);
            });
        }

        connectToServer();

        ```

        **Response 1** - 

        When the websocket connection is established and the user is Successfuly logged in, a "success" response will be received. The connection will then remain open, awaiting further updates from the server, such as when a new order is placed.
       
        ```

        {"Message":"LoginResponse","Status":"success"}

        ```

  - name: Order & Trade Response
    description: |
        **Response 2** -

        When an order is placed via API or through ATINS (outside of the websocket), this will provide the following response:

        ```

        {
            "Message": "Order",
            "status": "Successful",
            "data": {
                "order_id": "23",
                "parent_order_id": "6746",
                "exchange_order_id": "",
                "placed_by": "DAPI1",
                "tradingsymbol": "RELIANCE",
                "exchange": "NSECM",
                "instrument_token": "2885",
                "transaction_type": "Buy",
                "order_type": "MARKET",
                "status": "Unknown",
                "product": "CNC",
                "validity": "DAY",
                "price": "0.00",
                "userid": "DAPI1",
                "quantity": "100",
                "trigger_price": "0.00",
                "pending_quantity": "100",
                "filled_quantity": "0",
                "disclosed_quantity": "0",
                "order_timestamp": "02\/03\/2024 18:58:09",
                "exchange_timestamp": "01\/01\/1970 05:30:00",
                "status_message": "",
                "tag": "HELLOMOTO2"
            }
        }

        {
            "Message": "Trade",
            "status": "Successful",
            "data": {
                "trade_id": "12440",
                "order_id": "6746",
                "exchange_trade_id": "T28856746975208",
                "exchange_order_id": "O28856746",
                "Exchange": "NSECM",
                "tradingsymbol": "RELIANCE",
                "instrument_token": "2885",
                "tag
                "product": "CNC",
                "average_price": "2939.50",
                "price": "2939.50",
                "quantity": "100",
                "pending_quantity": "0",
                "transaction_type": "BUY",
                "fill_timestamp": "2024-03-03 00:28:09",
                "order_timestamp": "00:28:09",
                "exchange_timestamp": "2024-03-03 00:28:09"
            }
        }

        ```

x-tagGroups:
  - name: TRADE API
    tags:
      - Login Process
      - User
      - Orders
      - trades
      - Instruments
  - name: Market Data WS API
    tags:
      - Broadcast
      - LTP
      - OHLCL
      - Watch
  - name: Interactive WS API
    description: |
      The WebSocket Demo descripton 
    tags:
      - WS Login
      - Order & Trade Response
      
paths:
  /connect/login:
    post:
      tags:
        - Login Process
      summary: Login Endpoint
      description: The API consumer sends login credentials (secretKey & appKey) to the Interactive API server. After validation, if successful, the user receives a request token in the login response.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                api_key:
                  description: The API App key, It will look like ".KAoiU$GCfrrNDN4H|qq<<XtG"
                  type: string
                api_secrets:
                  description: secretKey to validate, it will look like "ZOYWyg6U5DfJ@D<NR!%3z<PR"
                  type: string

                  
      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3
          # example: '3'
      responses:
        '200':
          description: Successful response [click `>` to expand]
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: successful
                  data:
                    type: object
                    description: |
                      click `>` to expand
                    properties:
                      request_token:
                        type: string
                        description: It generates the request token, and this token remains valid for a duration of 24 hours from its generation time.
                        example: o%sZ|iPUWe7xfUQgBXKX

        '404':
          description: Login fail
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: No Application Found
        

      x-codeSamples:
        - lang: Python
          source: |
            import requests

            url = "https://wss1.mtsp.co.in:16107/connect/login"

            payload = {
              "api_key": "YOUR_API_KEY",
              "api_secrets": "YOUR_API_SECRET"
            }

            headers = {
              "Content-Type": "application/x-www-form-urlencoded",
              "Api-Version": "3"
            }

            response = requests.post(url, data=payload, headers=headers)

            data = response.json()
            print(data)
        - lang: curl
          source: |
            curl -i -X POST \
              https://wss1.mtsp.co.in:16107/connect/login \
              -H 'Api-Version: string' \
              -H 'Content-Type: application/x-www-form-urlencoded' \
              -d api_key=YOUR_API_KEY \
              -d api_secrets=YOUR_API_SECRET
            }
        - lang: Node.js
          source: |
            const axios = require('axios');

            async function run() {
              const formData = new URLSearchParams({
                api_key: 'YOUR_API_KEY',
                api_secrets: 'YOUR_API_SECRET'
              });

              try {
                const resp = await axios.post(
                  'https://wss1.mtsp.co.in:16107/connect/login',
                  formData.toString(),
                  {
                    headers: {
                      'Content-Type': 'application/x-www-form-urlencoded',
                      'Api-Version': '3'
                    }
                  }
                );

                console.log(resp.data);
              } catch (error) {
                console.error('Error:', error.message);
              }
            }

            run();

        - lang: Payload
          source: |
            "application/x-www-form-urlencoded"

            api_key=YOUR_API_KEY&api_secrets=YOUR_API_SECRET
    delete:
      tags:
        - Login Process
      summary: LOGOUT
      description: This call invalidates the session token and destroys the API session. The user should go through the login flow again to obtain a fresh session token for further activities. Any attempts to access API endpoints with the invalidated token will result in authentication errors. Once the new token is acquired, the user can resume activities within the application securely.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3
      responses:
        '200':
          description: Successful response
  
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: successful
 
        '401':
          description: Can't Logout
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: LOGOUT FAILURE

      x-codeSamples:
        - lang: Python
          source: |
            import requests

            url = "https://wss1.mtsp.co.in:16107/connect/login"

            headers = {
              "Api-Version": "3",
              "Authorization": "API_KEY:REQUEST_TOKEN"
            }

            response = requests.delete(url, headers=headers)

            data = response.json()
            print(data)
        - lang: curl
          source: |
            curl -i -X DELETE \
              https://wss1.mtsp.co.in:16107/connect/login \
              -H 'Api-Version: 3' \
              -H 'Authorization: API_KEY:REQUEST_TOKEN'
            }
        - lang: Node.js
          source: |
            const axios = require('axios');

            const url = 'https://wss1.mtsp.co.in:16107/connect/login';
            const headers = {
              'Api-Version': '3',
              'Authorization': 'API_KEY:REQUEST_TOKEN'
            };

            axios.delete(url, { headers })
              .then(response => {
                console.log(response.data);
              })
              .catch(error => {
                console.error('Error:', error.message);
              });

  /session/token:
    get:
      tags:
        - Login Process
      summary: Session Token
      description: You need to log in every day, every time you start the application, the session token lasts for 24 hours or until logout. Upon launching, users authenticate their sessions. The session token allows access to features securely for 24 hours or until logout. Exceeding this time or logging out invalidates the token, requiring a new login for continued access. This process ensures ongoing session security and a smooth user experience.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3

      responses:
        '200':
          description: Successful response [click `>` to expand]
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: successful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      user_type:
                        type: string
                        description: User's registered role at the broker. This will be individual for all retail users
                        example: '3'
                      email:
                        type: string
                        description: User's email address
                        example: 'info@multitradesoftech.com'
                      user_name:
                        type: string
                        description: User name of the client
                        example: 'MTS_User'
                      user_shortname:
                        type: string
                        description: User's short name or alias
                        example: 'User'
                      broker:
                        type: string
                        description: The broker ID
                        example: ''
                      exchanges:
                        type: string
                        description: Exchanges enabled for trading on the user's account
                        example: ''
                      products:
                        type: array
                        description: 	Margin product types enabled for the user
                        items:
                          type: string
                          description: 
                        example:
                          - CNC
                          - NRML
                      avatar_url:
                        type: string
                        description: URL of user's avatar, if there's one 
                        example: ''
                      user_id:
                        type: string
                        description: The unique user id registered with the broker and the exchanges
                        example: DAPI1
                      api_key:
                        type: string
                        description: The API key for which the authentication was performed
                        example: ''
                      access_token:
                        type: string
                        description: Generated access token during login. It remains valid for a duration of 24 hours from its generation time.
                        example: o%sZ|iPUWe7xfUQgBXKX
                      order-types:
                        type: array
                        description: Order types enabled for the user
                        items:
                          type: string
                          description: 
                        example:
                          - MARKET
                          - LIMIT
                          - SL
                          - SL-M
                      login_time:
                        type: string
                        description: The time of the user's most recent login.
                        example: 2024-02-0313:15:21
        '401':
          description: Token not valid
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: Invalid AccessToken

      x-codeSamples:
        - lang: Python
          source: |
            import requests

            url = "https://wss1.mtsp.co.in:16107/session/token"

            headers = {
              "Api-Version": "3",
              "Authorization": "API_KEY:REQUEST_TOKEN"
            }

            response = requests.get(url, headers=headers)

            data = response.json()
            print(data)
        - lang: curl
          source: |
            curl -i -X GET \
              https://wss1.mtsp.co.in:16107/session/token \
              -H 'Api-Version: 3' \
              -H 'Authorization: API_KEY:REQUEST_TOKEN'
        - lang: Node.js
          source: |
            const axios = require('axios');

            const url = 'https://wss1.mtsp.co.in:16107/session/token';
            const headers = {
              'Api-Version': '3',
              'Authorization': 'API_KEY:REQUEST_TOKEN'
            };

            axios.get(url, { headers })
              .then(response => {
                console.log(response.data);
              })
              .catch(error => {
                console.error('Error:', error.message);
              });

  /user/profile:
    get:
      tags:
        - User
      summary: User Profile
      description: The purpose of this request is to retrieve user profile data from the server from which users can access their profile stored by the broker, which remains retrievable at any given moment.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3
            
          # example: '3'
      responses:
        '200':
          description: Successful response [click `>` to expand]
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: successful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      user_id:
                        type: string
                        description: The unique user id registered with the broker and the exchanges
                        example: DAPI1
                      user_type:
                        type: string
                        description: User's registered role at the broker. This will be individual for all retail users
                        example: '3'
                      email:
                        type: string
                        description: User's email address
                        example: 'info@multitradesoftech.com'
                      user_name:
                        type: string
                        description: User name of the client
                        example: 'MTS_User'
                      user_shortname:
                        type: string
                        description: User's short name or alias
                        example: 'User'
                      broker:
                        type: string
                        description: The broker ID
                        example: ''
                      exchanges:
                        type: array
                        description: Exchanges enabled for trading on the user's account
                        items:
                          type: string
                        example:
                          - BSECM
                          - BSECOM
                          - BSEFO
                          - BSEFX
                          - BSEINX
                          - CQG
                          - DGCX
                          - IB
                          - MAXXTRADER
                          - MCX
                          - MCX1
                          - NCDEX
                          - NSECD
                          - NSECM
                          - NSECOM
                          - NSEFO
                          - NSEIFSC
                          - NSESLBM
                          - XT
                      products:
                        type: array
                        description: Margin product types enabled for the user
                        items:
                          type: string
                        example:
                          - CNC
                          - NRML
                      order-types:
                        type: array
                        description: Order types enabled for the user
                        items:
                          type: string
                        example:
                          - MARKET
                          - LIMIT
                          - SL
                          - SL-M
                      avatar_url:
                        type: string
                        description: URL of user's avatar, if there's one
                        example: ''
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  error:
                    type: string
                    example: 'Invalid_Authorization Combination or Invalid API_key.'

      x-codeSamples:
        - lang: Python
          source: |
            import requests

            url = "https://wss1.mtsp.co.in:16107/user/profile"

            headers = {
              "Api-Version": "3",
              "Authorization": "API_KEY:REQUEST_TOKEN"
            }

            response = requests.get(url, headers=headers)

            data = response.json()
            print(data)
        - lang: curl
          source: |
            curl -i -X GET \
              https://wss1.mtsp.co.in:16107/user/profile \
              -H 'Api-Version: 3' \
              -H 'Authorization: API_KEY:REQUEST_TOKEN'
        - lang: Node.js
          source: |
            const axios = require('axios');

            const url = 'https://wss1.mtsp.co.in:16107/user/profile';
            const headers = {
              'Api-Version': '3',
              'Authorization': 'API_KEY:REQUEST_TOKEN'
            };

            axios.get(url, { headers })
              .then(response => {
                console.log(response.data);
              })
              .catch(error => {
                console.error('Error:', error.message);
              });

  /user/margins:
    get:
      tags:
        - User
      summary: User Margin
      description: |
        The User Margin endpoint provides detailed information regarding funds, cash, and margin status for the user across both equity and commodity segments.

        Upon a successful request, the server responds with a JSON object containing various fields, including "status" and "data". The "data" field further encapsulates detailed information related to the user's margin status.

      security:
        - ApiKeyAuth: []
      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3
          # example: '3'
      responses:
        '200':
          description: Successful response [click `>` to expand]
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties: 
                  status:
                    type: string
                    description: 
                    example: successful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      CM:
                        type: object
                        description: [click `>` to expand]
                        properties:
                          enabled: 
                            type: bool
                            description: Indicates whether the segment is enabled for the user.
                            example: 'true'
                          net:
                            type: string
                            description: Net cash balance available for trading (**intraday_payin + adhoc_margin + collateral**)
                            example: '186819082.50'
                          available:
                            type: object
                            description: Details about available funds. [click `>` to expand]
                            properties:
                              adhoc_margin:
                                type: string
                                description: Adhoc Margin
                                example: '0.00'
                              cash:
                                type: string
                                description: Cash credit
                                example: '436819082'
                              collateral:
                                type: string
                                description: Collateral
                                example: '0.00'
                              intraday_payin:
                                type: string
                                description: Intraday Payin
                                example: '0'
                          utilized:
                            type: object
                            description: Details about utilized funds. [click `>` to expand]
                            properties:
                              debits:
                                type: string
                                description: Debits
                                example: '249999999.5'
                              exposure:
                                type: string
                                description: Exposure margins
                                example: '0.00'
                              m2m_realised:
                                type: string
                                description: Realised profit and loss
                                example: '0'
                              m2m_unrealised:
                                type: string
                                description: unrealised profit and loss
                                example: '0.00'
                              option_premium:
                                type: string
                                description: Option Premium
                                example: '0'
                              payout:
                                type: string
                                description: Payout amount
                                example: '0.00'
                              span:
                                type: string
                                description: Span margins
                                example: '0.00'
                              holding_sales:
                                type: string
                                description: Holding amount
                                example: '0.00'
                              turnover:
                                type: string
                                description:  Total turnover of the day
                                example: '0.00'
                      DEPOSIT:
                        type: object
                        description: [click `>` to expand]
                        properties:
                          enabled: 
                            type: bool
                            description: Indicates whether the segment is enabled for the user.
                            example: 'true'
                          net:
                            type: string
                            description: Net cash balance available for trading (**intraday_payin + adhoc_margin + collateral**)
                            example: '186819082.50'
                          available:
                            type: object
                            description: Details about available funds. [click `>` to expand]
                            properties:
                              adhoc_margin:
                                type: string
                                description: Adhoc Margin
                                example: '0.00'
                              cash:
                                type: string
                                description: Cash credit
                                example: '545235633'
                              collateral:
                                type: string
                                description: Collateral
                                example: '0.00'
                              intraday_payin:
                                type: string
                                description: Intraday Payin
                                example: '0'
                          utilized:
                            type: object
                            description: Details about utilized funds. [click `>` to expand]
                            properties:
                              debits:
                                type: string
                                description: Debits
                                example: '358416550.5'
                              exposure:
                                type: string
                                description: Exposure margins
                                example: '0.00'
                              m2m_realised:
                                type: string
                                description: Realised profit and loss
                                example: '0'
                              m2m_unrealised:
                                type: string
                                description: unrealised profit and loss
                                example: '0.00'
                              option_premium:
                                type: string
                                description: Option Premium
                                example: '0'
                              payout:
                                type: string
                                description: Payout amount
                                example: '0.00'
                              span:
                                type: string
                                description: Span margins
                                example: '0.00'
                              holding_sales:
                                type: string
                                description: Holding amount
                                example: '0.00'
                              turnover:
                                type: string
                                description:  Total turnover of the day
                                example: '0.00'
                      FO:
                        type: object
                        description: [click `>` to expand]
                        properties:
                          enabled: 
                            type: bool
                            description: Indicates whether the segment is enabled for the user.
                            example: 'true'
                          net:
                            type: string
                            description: Net cash balance available for trading (**intraday_payin + adhoc_margin + collateral**)
                            example: '386819082.50'
                          available:
                            type: object
                            description: Details about available funds. [click `>` to expand]
                            properties:
                              adhoc_margin:
                                type: string
                                description: Adhoc Margin
                                example: '0.00'
                              cash:
                                type: string
                                description: Cash credit
                                example: '948579472'
                              collateral:
                                type: string
                                description: Collateral
                                example: '0.00'
                              intraday_payin:
                                type: string
                                description: Intraday Payin
                                example: '0'
                          utilized:
                            type: object
                            description: Details about utilized funds. [click `>` to expand]
                            properties:
                              debits:
                                type: string
                                description: Debits
                                example: '561760389.5'
                              exposure:
                                type: string
                                description: Exposure margins
                                example: '0.00'
                              m2m_realised:
                                type: string
                                description: Realised profit and loss
                                example: '0'
                              m2m_unrealised:
                                type: string
                                description: unrealised profit and loss
                                example: '0.00'
                              option_premium:
                                type: string
                                description: Option Premium
                                example: '0'
                              payout:
                                type: string
                                description: Payout amount
                                example: '0.00'
                              span:
                                type: string
                                description: Span margins
                                example: '0.00'
                              holding_sales:
                                type: string
                                description: Holding amount
                                example: '0.00'
                              turnover:
                                type: string
                                description:  Total turnover of the day
                                example: '0.00'
                      MCX:
                        type: object
                        description: [click `>` to expand]
                        properties:
                          enabled: 
                            type: bool
                            description: Indicates whether the segment is enabled for the user.
                            example: 'true'
                          net:
                            type: string
                            description: Net cash balance available for trading (**intraday_payin + adhoc_margin + collateral**)
                            example: '385819082.50'
                          available:
                            type: object
                            description: Details about available funds. [click `>` to expand]
                            properties:
                              adhoc_margin:
                                type: string
                                description: Adhoc Margin
                                example: '0.00'
                              cash:
                                type: string
                                description: Cash credit
                                example: '873027432.00'
                              collateral:
                                type: string
                                description: Collateral
                                example: '0.00'
                              intraday_payin:
                                type: string
                                description: Intraday Payin
                                example: '0'
                          utilized:
                            type: object
                            description: Details about utilized funds. [click `>` to expand]
                            properties:
                              debits:
                                type: string
                                description: Debits
                                example: '487208349.5'
                              exposure:
                                type: string
                                description: Exposure margins
                                example: '0.00'
                              m2m_realised:
                                type: string
                                description: Realised profit and loss
                                example: '0'
                              m2m_unrealised:
                                type: string
                                description: unrealised profit and loss
                                example: '0.00'
                              option_premium:
                                type: string
                                description: Option Premium
                                example: '0'
                              payout:
                                type: string
                                description: Payout amount
                                example: '0.00'
                              span:
                                type: string
                                description: Span margins
                                example: '0.00'
                              holding_sales:
                                type: string
                                description: Holding amount
                                example: '0.00'
                              turnover:
                                type: string
                                description:  Total turnover of the day
                                example: '0.00'
        '404':
          description: Could Not Find The Segment
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: Could Not Find The Segment
        '400':
          description: Data Not Available
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: Data Not Available

      x-codeSamples:
        - lang: Python
          source: |
            import requests

            url = "https://wss1.mtsp.co.in:16107/user/margins"

            headers = {
              "Api-Version": "3",
              "Authorization": "API_KEY:REQUEST_TOKEN"
            }

            response = requests.get(url, headers=headers)

            data = response.json()
            print(data)

        - lang: curl
          source: |
            curl -i -X GET \
              https://wss1.mtsp.co.in:16107/user/margins \
              -H 'Api-Version: 3' \
              -H 'Authorization: API_KEY:REQUEST_TOKEN'

        - lang: Node.js
          source: |
            const axios = require('axios');

            const url = 'https://wss1.mtsp.co.in:16107/user/margins';
            const headers = {
              'Api-Version': '3',
              'Authorization': 'API_KEY:REQUEST_TOKEN'
            };

            axios.get(url, { headers })
              .then(response => {
                console.log(response.data);
              })
              .catch(error => {
                console.error('Error:', error);
              });



  /orders/regular:
    post:
      tags:
        - Orders
      summary: Orders Regular
      description: The order APIs facilitate placing orders of various types and retrieving daily order information. Within the MTS interactive API calls, users can initiate orders on exchanges and execute orders with stop-loss protection.
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                tradingsecurity:
                  type: string
                  description: Unique Security_ID of the script, example "3045"
                  example: '3045'
                exchange:
                  type: string
                  description: "BSECM, BSECOM, BSEFO,BSEINX, BSEFX, CQG, MCX, NSECD, NSECM, NSEFO, NSEIFSC, NSESLBM, DGCX, IB, MAXXTRADER, NCDEX, NSECOM "
                  example: NSECM
                transaction_type:
                  type: string
                  description: "BUY/ SELL"
                  example: BUY
                order_type:
                  type: string
                  description: "MARKET, LIMIT, SL, SL-M"
                  example: LIMIT
                quantity:
                  type: string
                  description: "Example: 900"
                  example: '1000'
                validity:
                  type: string
                  description: "DAY, IOC, GTT, GTC, OPG, FOK, GTX, GTD, EOS, FAK, ATO, ATC "
                  example: DAY
                price:
                  type: string
                  description: "Example: 1900.00"
                  example: '1900.00'
                product:
                  type: string
                  description: "CNC, NRML"
                  example: CNC
                tag:
                  type: string
                  description: "An optional tag to apply to an order to identify it (alphanumeric, max 20 chars)"
                  example: "DEMO"
                trigger_price:
                  type: string
                  description: "The price at which an order should be triggered (SL, SL-M)"
                  example: "2905.00"
                disclosed_quantity:
                  type: string
                  description: "Quantity to disclose publicly (for equity trades) `Optional`"
                  example: "90000"
                userid:
                  type: string
                  description: "The user id of the user, provided by Multitrade `Optional`"
                  example: "DEPI1"
                
      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3
          # example: '3'
      responses:
        '200':
          description: Successful response [click `>` to expand]
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: successful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      orderid:
                        type: string
                        description: It will return orderId of the trade
                        example: "128439"
        '401':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: >-
                          INVALID_TRANSACTION_TYPE/ INVALID_ORDER_TYPE/
                          INVALID_PRODUCT_TYPE/ Invalid Validity Type/ Invalid Request Token/ 
                          Invalid Api Key/ Invalid Open Close


      x-codeSamples:
        - lang: Python
          source: |
            import requests

            url = "https://wss1.mtsp.co.in:16107/orders/regular"

            payload = {
              "tradingsecurity": "3045",
              "exchange": "NSECM",
              "transaction_type": "BUY",
              "order_type": "LIMIT",
              "quantity": "100000",
              "validity": "DAY",
              "price": "510",
              "product": "CNC"
            }

            headers = {
              "Content-Type": "application/x-www-form-urlencoded",
              "Api-Version": "3",
              "Authorization": "API_KEY:REQUEST_TOKEN"
            }

            response = requests.post(url, data=payload, headers=headers)

            data = response.json()
            print(data)
        - lang: curl
          source: |
            curl -i -X POST \
              https://wss1.mtsp.co.in:16107/orders/regular \
              -H 'Api-Version: 3' \
              -H 'Authorization: YOUR_API_KEY_HERE' \
              -H 'Content-Type: application/x-www-form-urlencoded' \
              -d tradingsecurity=3045 \
              -d exchange=NSECM \
              -d transaction_type=BUY \
              -d order_type=LIMIT \
              -d quantity=100000 \
              -d validity=DAY \
              -d price=510 \
              -d product=CNC
        - lang: Node.js
          source: |
            const axios = require('axios');

            async function run() {
              const formData = {
                tradingsecurity: '3045',
                exchange: 'NSECM',
                transaction_type: 'BUY',
                order_type: 'LIMIT',
                quantity: '100000',
                validity: 'DAY',
                price: '510',
                product: 'CNC'
              };

              try {
                const resp = await axios.post(
                  'https://wss1.mtsp.co.in:16107/orders/regular',
                  new URLSearchParams(formData).toString(),
                  {
                    headers: {
                      'Content-Type': 'application/x-www-form-urlencoded',
                      'Api-Version': '3',
                      Authorization: 'API_KEY:REQUEST_TOKEN'
                    }
                  }
                );

                console.log(resp.data);
              } catch (error) {
                console.error('Error:', error.message);
              }
            }

            run();

        - lang: Payload
          source: >
            "application/x-www-form-urlencoded"


            tradingsecurity=3045&exchange=NSECM&transaction_type=BUY&order_type=LIMIT&quantity=100000&validity=DAY&price=510&product=CNC

  /orders:
    get:
      tags:
        - Orders
      summary: Order Status
      description: This will provide order status of all the placed trades.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3

      responses:
        '200':
          description: Successful response [click `>` to expand]
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: successful
                  data:
                    type: array
                    items:
                      - type: object
                        properties:
                          order_id:
                            type: string
                            description: Unique order ID, generated while placing the trade
                            example: "2918"
                          parent_order_id:
                            type: string
                            description: The parent ID of the order
                            example: "2918"
                          exchange_order_id:
                            type: string
                            description: ID assigned by the exchange for the order
                            example: "O30452918"
                          placed_by:
                            type: string
                            description: Identifier for the entity that placed the order
                            example: "LO1"
                          tradingsymbol:
                            type: string
                            description: Symbol of the traded instrument

                            example: "SBIN"
                          exchange:
                            type: string
                            description: The exchange where the trade occurred

                            example: "NSECM"
                          instrument_token:
                            type: string
                            description: The numerical identifier issued by the exchange representing the instrument. Used for subscribing to live market data over WebSocket.

                            example: "3045"
                          transaction_type:
                            type: string
                            description:  Type of transaction (e.g., BUY or SELL)

                            example: "Sell"
                          order_type:
                            type: string
                            description: The type of the order (e.g., MARKET, LIMIT, SL, SL-M)

                            example: "MARKET"
                          status:
                            type: string
                            description: The status of the order

                            example: "Execute"
                          product:
                            type: string
                            description: Type of product (e.g., CNC)

                            example: "CNC"
                          validity:
                            type: string
                            description: The validity of the order
                            
                            example: "DAY"
                          price:
                            type: string
                            description: Price at which the quantity was filled
                            example: "778.000000"
                          userid:
                            type: string
                            description: User ID associated with the trade
                            example: "LO1"
                          quantity:
                            type: string
                            description: Number of units traded
                            example: "100"
                          trigger_price:
                            type: string
                            description: The trigger price of the order
                            example: "0.000000"
                          average_price:
                            type: string
                            description: Price at which the quantity was filled
                            example: "747.700000"
                          pending_quantity:
                            type: string
                            description: Pending quantity to be filled
                            example: "0"
                          filled_quantity:
                            type: string
                            description: Quantity that's been filled
                            example: "100"
                          disclosed_quantity:
                            type: string
                            description: Quantity to be disclosed (may be diffent from actual quantity) to the public exhange orderbook. Only for equities.
                            example: "0"
                          market_protection:
                            type: string
                            description: The market protection of the order
                            example: "0.00"
                          order_timestamp:
                            type: string
                            description: Timestamp at which the order was registered by the API
                            example: "23/03/202415:01:11"
                          exchange_timestamp:
                            type: string
                            description: Timestamp at which the order was registered by the exchange
                            example: "23/03/202420:31:11"
                          status_message:
                            type: string
                            description: Textual description of the order's status. Failed orders come with human readable explanation
                            example: ""
                          tag:
                            type: string
                            description: Additional tag or label (if any)
                            example: "ReferenceTag"

                      - type: object
                        properties:
                          order_id:
                            type: string
                            description: Unique order ID, generated while placing the trade
                            example: "2919"
                          parent_order_id:
                            type: string
                            description: The parent ID of the order
                            example: "2919"
                          exchange_order_id:
                            type: string
                            description: ID assigned by the exchange for the order
                            example: "O30452919"
                          placed_by:
                            type: string
                            description: Identifier for the entity that placed the order
                            example: "LO1"
                          tradingsymbol:
                            type: string
                            description: Symbol of the traded instrument
                            example: "SBIN"
                          exchange:
                            type: string
                            description: The exchange where the trade occurred
                            example: "NSECM"
                          instrument_token:
                            type: string
                            description: The numerical identifier issued by the exchange representing the instrument. Used for subscribing to live market data over WebSocket.
                            example: "3045"
                          transaction_type:
                            type: string
                            description:  Type of transaction (e.g., BUY or SELL)
                            example: "Sell"
                          order_type:
                            type: string
                            description: The type of the order (e.g., MARKET, LIMIT, SL, SL-M)
                            example: "MARKET"
                          status:
                            type: string
                            description: The status of the order
                            example: "Execute"
                          product:
                            type: string
                            description: Type of product (e.g., CNC)
                            example: "CNC"
                          validity:
                            type: string
                            description: The validity of the order
                            example: "DAY"
                          price:
                            type: string
                            description: Price at which the quantity was filled
                            example: "778.000000"
                          userid:
                            type: string
                            description: User ID associated with the trade
                            example: "LO1"
                          quantity:
                            type: string
                            description: Number of units traded
                            example: "100"
                          trigger_price:
                            type: string
                            description: The trigger price of the order
                            example: "0.000000"
                          average_price:
                            type: string
                            description: Price at which the quantity was filled
                            example: "747.400000"
                          pending_quantity:
                            type: string
                            description: Pending quantity to be filled
                            example: "0"
                          filled_quantity:
                            type: string
                            description: Quantity that's been filled
                            example: "100"
                          disclosed_quantity:
                            type: string
                            description: Quantity to be disclosed (may be diffent from actual quantity) to the public exhange orderbook. Only for equities.
                            example: "0"
                          market_protection:
                            type: string
                            description: The market protection of the order
                            example: "0.00"
                          order_timestamp:
                            type: string
                            description: Timestamp at which the order was registered by the API
                            example: "23/03/202415:01:19"
                          exchange_timestamp:
                            type: string
                            description: Timestamp at which the order was registered by the exchange
                            example: "23/03/202420:31:19"
                          status_message:
                            type: string
                            description: Textual description of the order's status. Failed orders come with human readable explanation
                            example: ""
                          tag:
                            type: string
                            description: Additional tag or label (if any)
                            example: "MTS"

                    
                      - type: object
                        properties:
                          order_id:
                            type: string
                            description: Unique order ID, generated while placing the trade
                            example: "2920"
                          parent_order_id:
                            type: string
                            description: The parent ID of the order
                            example: "2920"
                          exchange_order_id:
                            type: string
                            description: ID assigned by the exchange for the order
                            example: "O30452920"
                          placed_by:
                            type: string
                            description: Identifier for the entity that placed the order
                            example: "LO1"
                          tradingsymbol:
                            type: string
                            description: Symbol of the traded instrument
                            example: "SBIN"
                          exchange:
                            type: string
                            description: The exchange where the trade occurred
                            example: "NSECM"
                          instrument_token:
                            type: string
                            description: The numerical identifier issued by the exchange representing the instrument. Used for subscribing to live market data over WebSocket.
                            example: "3045"
                          transaction_type:
                            type: string
                            description:  Type of transaction (e.g., BUY or SELL)
                            example: "Sell"
                          order_type:
                            type: string
                            description: The type of the order (e.g., MARKET, LIMIT, SL, SL-M)
                            example: "MARKET"
                          status:
                            type: string
                            description: The status of the order
                            example: "Execute"
                          product:
                            type: string
                            description: Type of product (e.g., CNC)
                            example: "NRML"
                          validity:
                            type: string
                            description: The validity of the order
                            example: "DAY"
                          price:
                            type: string
                            description: Price at which the quantity was filled
                            example: "778.000000"
                          userid:
                            type: string
                            description: User ID associated with the trade
                            example: "LO1"
                          quantity:
                            type: string
                            description: Number of units traded
                            example: "100"
                          trigger_price:
                            type: string
                            description: The trigger price of the order
                            example: "0.000000"
                          average_price:
                            type: string
                            description: Price at which the quantity was filled
                            example: "748.050000"
                          pending_quantity:
                            type: string
                            description: Pending quantity to be filled
                            example: "0"
                          filled_quantity:
                            type: string
                            description: Quantity that's been filled
                            example: "100"
                          disclosed_quantity:
                            type: string
                            description: Quantity to be disclosed (may be diffent from actual quantity) to the public exhange orderbook. Only for equities.
                            example: "0"
                          market_protection:
                            type: string
                            description: The market protection of the order
                            example: "0.00"
                          order_timestamp:
                            type: string
                            description: Timestamp at which the order was registered by the API
                            example: "23/03/202415:02:24"
                          exchange_timestamp:
                            type: string
                            description: Timestamp at which the order was registered by the exchange
                            example: "23/03/202420:32:24"
                          status_message:
                            type: string
                            description: Textual description of the order's status. Failed orders come with human readable explanation
                            example: ""
                          tag:
                            type: string
                            description: Additional tag or label (if any)
                            example: "ReferenceTag"
        '401':
          description: Token not valid
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: Invalid AccessToken

      x-codeSamples:
        - lang: Python
          source: |
            import requests

            url = "https://wss1.mtsp.co.in:16107/orders"

            headers = {
              "Api-Version": "3",
              "Authorization": "API_KEY:REQUEST_TOKEN"
            }

            response = requests.get(url, headers=headers)

            data = response.json()
            print(data)
        - lang: curl
          source: |
            curl -i -X GET \
              https://wss1.mtsp.co.in:16107/orders \
              -H 'Api-Version: 3' \
              -H 'Authorization: API_KEY:REQUEST_TOKEN'
        - lang: Node.js
          source: |
            const axios = require('axios');

            const url = 'https://wss1.mtsp.co.in:16107/orders';
            const headers = {
              'Api-Version': '3',
              'Authorization': 'API_KEY:REQUEST_TOKEN'
            };

            axios.get(url, { headers })
              .then(response => {
                console.log(response.data);
              })
              .catch(error => {
                console.error('Error:', error.message);
              });
 

  /orders/{orderid}:
    get:
      tags:
        - Orders
      summary: Order Status - OrderID wise
      description: This will provide order status of the placed trade with the help of OrderID.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3

      responses:
        '200':
          description: Successful response [click `>` to expand]
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Successful
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        order_id:
                          type: string
                          description: Unique order ID, generated while placing the trade
                          example: "2920"
                        parent_order_id:
                          type: string
                          description: The parent ID of the order
                          example: "2920"
                        exchange_order_id:
                          type: string
                          description: ID assigned by the exchange for the order
                          example: "O30452920"
                        placed_by:
                          type: string
                          description: Identifier for the entity that placed the order
                          example: "LO1"
                        status:
                          type: string
                          description: The status of the order
                          example: "Execute"
                        tradingsymbol:
                          type: string
                          description: Symbol of the traded instrument
                          example: "SBIN"
                        exchange:
                          type: string
                          description: The exchange where the trade occurred
                          example: "NSECM"
                        instrument_token:
                          type: string
                          description: The numerical identifier issued by the exchange representing the instrument. Used for subscribing to live market data over WebSocket.
                          example: "3045"
                        transaction_type:
                          type: string
                          description:  Type of transaction (e.g., BUY or SELL)
                          example: "Sell"
                        order_type:
                          type: string
                          description: The type of the order (e.g., MARKET, LIMIT, SL, SL-M)
                          example: "MARKET"
                        product:
                          type: string
                          description: Type of product (e.g., CNC)
                          example: "NRML"
                        validity:
                          type: string
                          description: The validity of the order
                          example: "DAY"
                        price:
                          type: string
                          description: Price at which the quantity was filled
                          example: "778.000000"
                        userid:
                          type: string
                          description: User ID associated with the trade
                          example: "LO1"
                        quantity:
                          type: string
                          description: Number of units traded
                          example: "100"
                        trigger_price:
                          type: string
                          description: The trigger price of the order
                          example: "0.000000"
                        average_price:
                          type: string
                          description: Price at which the quantity was filled
                          example: "0.00"
                        pending_quantity:
                          type: string
                          description: Pending quantity to be filled
                          example: "0"
                        filled_quantity:
                          type: string
                          description: Quantity that's been filled
                          example: "100"
                        disclosed_quantity:
                          type: string
                          description: Quantity to be disclosed (may be diffent from actual quantity) to the public exhange orderbook. Only for equities.
                          example: "0"
                        market_protection:
                          type: string
                          description: The market protection of the order
                          example: "0.00"
                        order_timestamp:
                          type: string
                          description: Timestamp at which the order was registered by the API
                          example: "23/03/202415:02:24"
                        exchange_timestamp:
                          type: string
                          description: Timestamp at which the order was registered by the exchange
                          example: "23/03/202420:32:24"
                        status_message:
                          type: string
                          description: Textual description of the order's status. Failed orders come with human readable explanation
                          example: ""
                        tag:
                          type: string
                          description: Additional tag or label (if any)
                          example: "ReferenceTag"
        '401':
          description: Token not valid
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: Invalid AccessToken

      x-codeSamples:
        - lang: Python
          source: |
            import requests

            url = "https://wss1.mtsp.co.in:16107/orders/2920"

            headers = {
              "Api-Version": "3",
              "Authorization": "API_KEY:REQUEST_TOKEN"
            }

            response = requests.get(url, headers=headers)

            data = response.json()
            print(data)
        - lang: curl
          source: |
            curl -i -X GET \
              https://wss1.mtsp.co.in:16107/orders/2920 \
              -H 'Api-Version: 3' \
              -H 'Authorization: API_KEY:REQUEST_TOKEN'
        - lang: Node.js
          source: |
            const axios = require('axios');

            const url = 'https://wss1.mtsp.co.in:16107/orders/2920';
            const headers = {
              'Api-Version': '3',
              'Authorization': 'API_KEY:REQUEST_TOKEN'
            };

            axios.get(url, { headers })
              .then(response => {
                console.log(response.data);
              })
              .catch(error => {
                console.error('Error:', error.message);
              });

  /orders/{Reference}/{orderid}:
    get:
      tags:
        - Orders
      summary: Order Status - Reference wise
      description: This will provide order status of the placed trade with the help of Tag and OrderID.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3

      responses:
        '200':
          description: Successful response [click `>` to expand]
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Successful
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        order_id:
                          type: string
                          description: Unique order ID, generated while placing the trade
                          example: "2920"
                        parent_order_id:
                          type: string
                          description: The parent ID of the order
                          example: "2920"
                        exchange_order_id:
                          type: string
                          description: ID assigned by the exchange for the order
                          example: "O30452920"
                        placed_by:
                          type: string
                          description: Identifier for the entity that placed the order
                          example: "LO1"
                        status:
                          type: string
                          description: The status of the order
                          example: "Execute"
                        tradingsymbol:
                          type: string
                          description: Symbol of the traded instrument
                          example: "SBIN"
                        exchange:
                          type: string
                          description: The exchange where the trade occurred
                          example: "NSECM"
                        instrument_token:
                          type: string
                          description: The numerical identifier issued by the exchange representing the instrument. Used for subscribing to live market data over WebSocket.
                          example: "3045"
                        transaction_type:
                          type: string
                          description:  Type of transaction (e.g., BUY or SELL)
                          example: "Sell"
                        order_type:
                          type: string
                          description: The type of the order (e.g., MARKET, LIMIT, SL, SL-M)
                          example: "MARKET"
                        product:
                          type: string
                          description: Type of product (e.g., CNC)
                          example: "NRML"
                        validity:
                          type: string
                          description: The validity of the order
                          example: "DAY"
                        price:
                          type: string
                          description: Price at which the quantity was filled
                          example: "778.000000"
                        userid:
                          type: string
                          description: User ID associated with the trade
                          example: "LO1"
                        quantity:
                          type: string
                          description: Number of units traded
                          example: "100"
                        trigger_price:
                          type: string
                          description: The trigger price of the order
                          example: "0.000000"
                        average_price:
                          type: string
                          description: Price at which the quantity was filled
                          example: "0.00"
                        pending_quantity:
                          type: string
                          description: Pending quantity to be filled
                          example: "0"
                        filled_quantity:
                          type: string
                          description: Quantity that's been filled
                          example: "100"
                        disclosed_quantity:
                          type: string
                          description: Quantity to be disclosed (may be diffent from actual quantity) to the public exhange orderbook. Only for equities.
                          example: "0"
                        market_protection:
                          type: string
                          description: The market protection of the order
                          example: "0.00"
                        order_timestamp:
                          type: string
                          description: Timestamp at which the order was registered by the API
                          example: "23/03/202415:02:24"
                        exchange_timestamp:
                          type: string
                          description: Timestamp at which the order was registered by the exchange
                          example: "23/03/202420:32:24"
                        status_message:
                          type: string
                          description: Textual description of the order's status. Failed orders come with human readable explanation
                          example: ""
                        tag:
                          type: string
                          description: Additional tag or label (if any)
                          example: "ReferenceTag"
        '401':
          description: Token not valid
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: Invalid AccessToken

      x-codeSamples:
        - lang: Python
          source: |
            import requests

            url = "https://wss1.mtsp.co.in:16107/orders/ReferenceTag/2920"

            headers = {
              "Api-Version": "3",
              "Authorization": "API_KEY:REQUEST_TOKEN"
            }

            response = requests.get(url, headers=headers)

            data = response.json()
            print(data)
        - lang: curl
          source: |
            curl -i -X GET \
              https://wss1.mtsp.co.in:16107/orders/ReferenceTag/2920 \
              -H 'Api-Version: 3' \
              -H 'Authorization: API_KEY:REQUEST_TOKEN'
        - lang: Node.js
          source: |
            const axios = require('axios');

            const url = 'https://wss1.mtsp.co.in:16107/orders/ReferenceTag/2920';
            const headers = {
              'Api-Version': '3',
              'Authorization': 'API_KEY:REQUEST_TOKEN'
            };

            axios.get(url, { headers })
              .then(response => {
                console.log(response.data);
              })
              .catch(error => {
                console.error('Error:', error.message);
              });

  /orders/regular/{orderid}:
    put:
      tags:
        - Orders
      summary: Orders Modify Quantity
      description: It facility to modify your open orders by allowing you to change the limit order to market or vice versa, change the Price or Quantity of the limit open order, change the disclosed quantity, or stop-loss of any open stop-loss order.
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                order_type:
                  type: string
                  description: "MARKET, LIMIT, SL, SL-M"
                  example: 'MARKET   '
                quantity:
                  type: string
                  description: Order Quantity is the number of Sell or Buy orders
                  example: '5'
                price:
                  type: string
                  description: This is a price that a buyer wishes to purchase a security at, hence the price is delineated by the buyer.
                  example: '500'
                validity:
                  type: string
                  description: "DAY, IOC, GTT, GTC, OPG, FOK, GTX, GTD, EOS, FAK, ATO, ATC "
                  example: DAY
                trigger_price:
                  type: string
                  description: "The price at which an order should be triggered (SL, SL-M)"
                  example: "2905.00"
                disclosed_quantity:
                  type: string
                  description: "Quantity to disclose publicly (for equity trades) `Optional`"
                  example: "90000"
                userid:
                  type: string
                  description: "The user id of the user, provided by Multitrade `Optional`"
                  example: "DEPI1"
                  
                
      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3
          # example: '3'
      responses:
        '200':
          description: Successful response [click `>` to expand]
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: successful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      orderid:
                        type: string
                        description: It will return orderId of the order
                        example: "128439"
        '401':
          description: API key not matched
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: API_KEY_NOT_MATCHED
        '408':
          description: API Client not connected
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: API Client Not Connected

      x-codeSamples:
        - lang: Python
          source: |
            import requests

            url = "https://wss1.mtsp.co.in:16107/orders/regular/128439"

            payload = {
              "order_type": "MARKET",
              "quantity": "5",
              "validity": "DAY",
              "price": "500"
            }

            headers = {
              "Content-Type": "application/x-www-form-urlencoded",
              "Api-Version": "3",
              "Authorization": "API_KEY:REQUEST_TOKEN"
            }

            response = requests.put(url, data=payload, headers=headers)

            data = response.json()
            print(data)
        - lang: curl
          source: |
            curl -i -X PUT \
              https://wss1.mtsp.co.in:16107/orders/regular/128439 \
              -H 'Api-Version: 3' \
              -H 'Authorization: API_KEY:REQUEST_TOKEN' \
              -H 'Content-Type: application/x-www-form-urlencoded' \
              -d 'order_type=MARKET   ' \
              -d quantity=5 \
              -d validity=DAY \
              -d price=500
        - lang: Node.js
          source: |
            const axios = require('axios');

            const url = 'https://wss1.mtsp.co.in:16107/orders/regular/128439';
            const payload = {
              "order_type": "MARKET",
              "quantity": "5",
              "validity": "DAY",
              "price": "500"
            };
            const headers = {
              "Content-Type": "application/x-www-form-urlencoded",
              "Api-Version": "3",
              "Authorization": "API_KEY:REQUEST_TOKEN"
            };

            axios.put(url, new URLSearchParams(payload), { headers })
              .then(response => {
                console.log(response.data);
              })
              .catch(error => {
                console.error('Error:', error);
              });

        - lang: Payload
          source: |
            "application/x-www-form-urlencoded"

            order_type=MARKET%20%20%20&quantity=5&validity=DAY&price=500
  /orders/regular/{Orderid}:
    put:
      tags:
        - Orders
      summary: Orders Regular MARKET
      description: |
        This endpoint is used to update a regular order by its ID.
        it sends a PUT request to update the price of a regular order.
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                order_type:
                  type: string
                  description: MARKET, LIMIT, SL, SL-M
                  example: MARKET
      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3
          # example: '3'
      responses:
        '200':
          description: Successful response [click `>` to expand]
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: successful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      orderid:
                        type: string
                        description: It will return orderId of the trade
                        example: "128439"
        '404':
          description: No Orders found
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: No Orders Found


      x-codeSamples:
        - lang: Python
          source: >
            import requests


            url = "https://wss1.mtsp.co.in:16107/orders/regular/128439"


            payload='price=610'

            headers = {
              'Api-Version': '3',
              'Authorization': 'API_KEY:REQUEST_TOKEN'
            }


            response = requests.request("PUT", url, headers=headers,
            data=payload)


            print(response.text)
        - lang: Node.js
          source: |
            const axios = require('axios');

            const url = 'https://wss1.mtsp.co.in:16107/orders/regular/128439';
            const payload = 'price=610';
            const headers = {
              'Api-Version': '3',
              'Authorization': 'API_KEY:REQUEST_TOKEN'
            };

            axios.put(url, payload, { headers })
              .then(response => {
                console.log(response.data);
              })
              .catch(error => {
                console.error('Error:', error);
              });

        - lang: curl
          source: >
            curl --location --request PUT
            'https://wss1.mtsp.co.in:16107/orders/regular/128439' \

            --header 'Api-Version: 3' \

            --header 'Authorization: API_KEY:REQUEST_TOKEN' \

            --data-urlencode 'price=610'
    delete:
      tags:
        - Orders
      summary: Orders Regular CANCEL
      description: |
        This API can be called to cancel any open order of the user by providing the correct appOrderID matching with the chosen open order to cancel.

      security:
        - ApiKeyAuth: []
      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3
          # example: '3'
      responses:
        '200':
          description: Successful response [click `>` to expand]
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: successful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      order_id:
                        type: string
                        description: It will return orderId of the trade.
                        example: '194719'
        '401':
          description: Invalid access token
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: Invalid AccessToken

      x-codeSamples:
        - lang: Python
          source: >
            import requests


            url = "https://wss1.mtsp.co.in:16107/orders/regular/128439"


            payload={}

            headers = {
              'Api-Version': '3',
              'Authorization': 'API_KEY:REQUEST_TOKEN'
            }


            response = requests.request("DELETE", url, headers=headers,
            data=payload)


            print(response.text)
        - lang: Node.js
          source: |
            const axios = require('axios');

            const url = 'https://wss1.mtsp.co.in:16107/orders/regular/128439';
            const headers = {
              'Api-Version': '3',
              'Authorization': 'API_KEY:REQUEST_TOKEN'
            };

            axios.delete(url, { headers })
              .then(response => {
                console.log(response.data);
              })
              .catch(error => {
                console.error('Error:', error);
              });

  
        - lang: curl
          source: >
            curl --location --request DELETE
            'https://wss1.mtsp.co.in:16107/orders/regular/128439' \

            --header 'Api-Version: 3' \

            --header 'Authorization: 'API_KEY:REQUEST_TOKEN'
  /trades:
    get:
      tags:
        - trades
      summary: Trades
      description: |
        When any order gets executed, a new trade event is generated by the server. Clients can listen to these events by registering to receive them.

      
      security:
        - ApiKeyAuth: []
      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3
          # example: '3'
      responses:
        '200':
          description: Successful response [click `>` to expand]
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: successful
                  data:
                    type: array
                    description: [click `>` to expand]
                    items:
                      - type: object
                        properties:
                          trade_id:
                            type: string
                            example: "1740"
                          order_id:
                            type: string
                            description: Unique order ID, generated while placing the trade
                            example: "22"
                          exchange:
                            type: string
                            description: The exchange where the trade occurred
                            example: "NSECM"
                          tradingsymbol:
                            type: string
                            description: Symbol of the traded instrument
                            example: "SBIN"
                          instrument_token:
                            type: string
                            description: The numerical identifier issued by the exchange representing the instrument. Used for subscribing to live market data over WebSocket.
                            example: "NSECM"
                          product:
                            type: string
                            description: Type of product (e.g., CNC)
                            example: "CNC"
                          average_price:
                            type: string
                            description: Price at which the quantity was filled
                            example: "747.70000000000005"
                          quantity:
                            type: string
                            description: Number of units traded
                            example: "100"
                          tag:
                            type: string
                            description: Additional tag or label (if any)
                            example: "ReferenceTag"
                          placed_by:
                            type: string
                            description: Identifier for the entity that placed the order
                            example: "LO1"
                          userid:
                            type: string
                            description: User ID associated with the trade
                            example: "LO1"
                          transaction_type:
                            type: string
                            description:  Type of transaction (e.g., BUY or SELL)
                            example: "SELL"
                          exchange_order_id:
                            type: string
                            description: ID assigned by the exchange for the order
                            example: "O30452918"
                          fill_timestamp:
                            type: string
                            description: Timestamp indicating when the trade was filled at the exchange
                            example: "23/03/202420:31:11"
                          order_timestamp:
                            type: string
                            description: Timestamp at which the order was registered by the API
                            example: "15:01:11"
                          exchange_timestamp:
                            type: string
                            description: Timestamp at which the order was registered by the exchange
                            example: "23/03/202420:31:11"


                      - type: object
                        properties:
                          trade_id:
                            type: string
                            example: "1741"
                          order_id:
                            type: string
                            description: Unique order ID, generated while placing the trade
                            example: "23"
                          exchange:
                            type: string
                            description: The exchange where the trade occurred
                            example: "NSECM"
                          tradingsymbol:
                            type: string
                            description: Symbol of the traded instrument
                            example: "SBIN"
                          instrument_token:
                            type: string
                            description: The numerical identifier issued by the exchange representing the instrument. Used for subscribing to live market data over WebSocket.
                            example: "NSECM"
                          product:
                            type: string
                            description: Type of product (e.g., CNC)
                            example: "CNC"
                          average_price:
                            type: string
                            description: Price at which the quantity was filled
                            example: "747.39999999999998"
                          quantity:
                            type: string
                            description: Number of units traded
                            example: "100"
                          tag:
                            type: string
                            description: Additional tag or label (if any)
                            example: "ReferenceTag"
                          placed_by:
                            type: string
                            description: Identifier for the entity that placed the order
                            example: "LO1"
                          userid:
                            type: string
                            description: User ID associated with the trade
                            example: "LO1"
                          transaction_type:
                            type: string
                            description:  Type of transaction (e.g., BUY or SELL)
                            example: "SELL"
                          exchange_order_id:
                            type: string
                            description: ID assigned by the exchange for the order
                            example: "O30452919"
                          fill_timestamp:
                            type: string
                            description: Timestamp indicating when the trade was filled at the exchange
                            example: "23/03/202420:31:19"
                          order_timestamp:
                            type: string
                            description: Timestamp at which the order was registered by the API
                            example: "15:01:19"
                          exchange_timestamp:
                            type: string
                            description: Timestamp at which the order was registered by the exchange
                            example: "23/03/202420:31:19"

                      - type: object
                        properties:
                          trade_id:
                            type: string
                            example: "1742"
                          order_id:
                            type: string
                            description: Unique order ID, generated while placing the trade
                            example: "24"
                          exchange:
                            type: string
                            description: The exchange where the trade occurred
                            example: "NSECM"
                          tradingsymbol:
                            type: string
                            description: Symbol of the traded instrument
                            example: "SBIN"
                          instrument_token:
                            type: string
                            description: The numerical identifier issued by the exchange representing the instrument. Used for subscribing to live market data over WebSocket.
                            example: "NSECM"
                          product:
                            type: string
                            description: Type of product (e.g., CNC)
                            example: "NRML"
                          average_price:
                            type: string
                            description: Price at which the quantity was filled
                            example: "748.04999999999995"
                          quantity:
                            type: string
                            description: Number of units traded
                            example: "100"
                          tag:
                            type: string
                            description: Additional tag or label (if any)
                            example: "ReferenceTag"
                          placed_by:
                            type: string
                            description: Identifier for the entity that placed the order
                            example: "LO1"
                          userid:
                            type: string
                            description: User ID associated with the trade
                            example: "LO1"
                          transaction_type:
                            type: string
                            description:  Type of transaction (e.g., BUY or SELL)
                            example: "SELL"
                          exchange_order_id:
                            type: string
                            description: ID assigned by the exchange for the order
                            example: "O30452920"
                          fill_timestamp:
                            type: string
                            description: Timestamp indicating when the trade was filled at the exchange
                            example: "23/03/202420:32:24"
                          order_timestamp:
                            type: string
                            description: Timestamp at which the order was registered by the API
                            example: "15:02:24"
                          exchange_timestamp:
                            type: string
                            description: Timestamp at which the order was registered by the exchange
                            example: "23/03/202420:32:24"
        '401':
          description: Invalid access token
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: Invalid AccessToken

      x-codeSamples:
        - lang: Python
          source: >
            import requests


            url = "https://wss1.mtsp.co.in:16107/trades"


            payload={}

            headers = {
              'Api-Version': '3',
              'Authorization': 'API_KEY:REQUEST_TOKEN'
            }


            response = requests.request("GET", url, headers=headers,
            data=payload)


            print(response.text)
        - lang: Node.js
          source: |
            var request = require('request');
            var options = {
              'method': 'GET',
              'url': 'https://wss1.mtsp.co.in:16107/trades',
              'headers': {
                'Api-Version': '3',
                'Authorization': 'API_KEY:REQUEST_TOKEN'
              }
            };
            request(options, function (error, response) {
              if (error) throw new Error(error);
              console.log(response.body);
            });
        - lang: curl
          source: |
            curl --location 'https://wss1.mtsp.co.in:16107/trades' \
            --header 'Api-Version: 3' \
            --header 'Authorization: 'API_KEY:REQUEST_TOKEN'
  /trades/{OrderID}:
    get:
      tags:
        - trades
      summary: Trade - OrderID wise
      description: |
        When any order gets executed, a new trade event is generated by the server. It can be retrieved particularly if OrderID is known.

      
      security:
        - ApiKeyAuth: []
      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3
          # example: '3'
      responses:
        '200':
          description: Successful response [click `>` to expand]
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: successful
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        trade_id:
                          type: string
                          example: "1742"
                        order_id:
                          type: string
                          description: Unique order ID, generated while placing the trade
                          example: "24"
                        exchange_order_id:
                          type: string
                          description: ID assigned by the exchange for the order
                          example: "O30452920"
                        tradingsymbol:
                          type: string
                          description: Symbol of the traded instrument
                          example: "SBIN"
                        exchange:
                          type: string
                          description: The exchange where the trade occurred
                          example: "NSECM"
                        instrument_token:
                          type: string
                          description: The numerical identifier issued by the exchange representing the instrument. Used for subscribing to live market data over WebSocket.
                          example: "NSECM"
                        product:
                          type: string
                          description: Type of product (e.g., CNC)
                          example: "NRML"
                        average_price:
                          type: string
                          description: Price at which the quantity was filled
                          example: "748.04999999999995"
                        quantity:
                          type: string
                          description: Number of units traded
                          example: "100"
                        placed_by:
                          type: string
                          description: Identifier for the entity that placed the order
                          example: "LO1"
                        userid:
                          type: string
                          description: User ID associated with the trade
                          example: "LO1"
                        transaction_type:
                          type: string
                          description:  Type of transaction (e.g., BUY or SELL)
                          example: "Sell"
                        tag:
                          type: string
                          description: Additional tag or label (if any)
                          example: "ReferenceTag"
                        fill_timestamp:
                          type: string
                          description: Timestamp indicating when the trade was filled at the exchange
                          example: "23/03/202420:32:24"
                        exchange_timestamp:
                          type: string
                          description: Timestamp at which the order was registered by the exchange
                          example: "23/03/202420:32:24"
        '401':
          description: Invalid access token
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: Invalid AccessToken

      x-codeSamples:
        - lang: Python
          source: >
            import requests


            url = "https://wss1.mtsp.co.in:16107/trades/2920"


            payload={}

            headers = {
              'Api-Version': '3',
              'Authorization': 'API_KEY:REQUEST_TOKEN'
            }


            response = requests.request("GET", url, headers=headers,
            data=payload)


            print(response.text)
        - lang: Node.js
          source: |
            var request = require('request');
            var options = {
              'method': 'GET',
              'url': 'https://wss1.mtsp.co.in:16107/trades/2920',
              'headers': {
                'Api-Version': '3',
                'Authorization': 'API_KEY:REQUEST_TOKEN'
              }
            };
            request(options, function (error, response) {
              if (error) throw new Error(error);
              console.log(response.body);
            });
        - lang: curl
          source: |
            curl --location 'https://wss1.mtsp.co.in:16107/trades/2920' \
            --header 'Api-Version: 3' \
            --header 'Authorization: 'API_KEY:REQUEST_TOKEN'
  /trades/{Reference}/{orderID}:
    get:
      tags:
        - trades
      summary: Trade - Reference wise
      description: |
        When any order gets executed, a new trade event is generated by the server. It can be retrieved selectively if OrderID and reference tag is known.

      
      security:
        - ApiKeyAuth: []
      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3
          # example: '3'
      responses:
        '200':
          description: Successful response [click `>` to expand]
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Successful
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        trade_id:
                          type: string
                          example: "1742"
                        order_id:
                          type: string
                          description: Unique order ID, generated while placing the trade
                          example: "24"
                        exchange_order_id:
                          type: string
                          description: ID assigned by the exchange for the order
                          example: "O30452920"
                        tradingsymbol:
                          type: string
                          description: Symbol of the traded instrument
                          example: "SBIN"
                        exchange:
                          type: string
                          description: The exchange where the trade occurred
                          example: "NSECM"
                        instrument_token:
                          type: string
                          description: The numerical identifier issued by the exchange representing the instrument. Used for subscribing to live market data over WebSocket.
                          example: "NSECM"
                        product:
                          type: string
                          description: Type of product (e.g., CNC)
                          example: "NRML"
                        average_price:
                          type: string
                          description: Price at which the quantity was filled
                          example: "748.04999999999995"
                        quantity:
                          type: string
                          description: Number of units traded
                          example: "100"
                        placed_by:
                          type: string
                          description: Identifier for the entity that placed the order
                          example: "LO1"
                        userid:
                          type: string
                          description: User ID associated with the trade
                          example: "LO1"
                        transaction_type:
                          type: string
                          description:  Type of transaction (e.g., BUY or SELL)
                          example: "Sell"
                        tag:
                          type: string
                          description: Additional tag or label (if any)
                          example: "ReferenceTag"
                        fill_timestamp:
                          type: string
                          description: Timestamp indicating when the trade was filled at the exchange
                          example: "23/03/202420:32:24"
                        exchange_timestamp:
                          type: string
                          description: Timestamp at which the order was registered by the exchange
                          example: "23/03/202420:32:24"

        '401':
          description: Invalid access token
          content:
            application/json:
              schema:
                type: object
                description: [click `>` to expand]
                properties:
                  status:
                    type: string
                    example: unsuccessful
                  data:
                    type: object
                    description: [click `>` to expand]
                    properties:
                      error:
                        type: string
                        example: Invalid AccessToken

      x-codeSamples:
        - lang: Python
          source: >
            import requests


            url = "https://wss1.mtsp.co.in:16107/trades/ReferenceTag/2920"


            payload={}

            headers = {
              'Api-Version': '3',
              'Authorization': 'API_KEY:REQUEST_TOKEN'
            }


            response = requests.request("GET", url, headers=headers,
            data=payload)


            print(response.text)
        - lang: Node.js
          source: |
            var request = require('request');
            var options = {
              'method': 'GET',
              'url': 'https://wss1.mtsp.co.in:16107/trades/ReferenceTag/2920',
              'headers': {
                'Api-Version': '3',
                'Authorization': 'API_KEY:REQUEST_TOKEN'
              }
            };
            request(options, function (error, response) {
              if (error) throw new Error(error);
              console.log(response.body);
            });
        - lang: curl
          source: |
            curl --location 'https://wss1.mtsp.co.in:16107/trades/ReferenceTag/2920' \
            --header 'Api-Version: 3' \
            --header 'Authorization: 'API_KEY:REQUEST_TOKEN'
  /instruments:
    get:
      tags:
        - Instruments
      summary: /instruments
      description: |
        The Instruments API provides a single, easy-to-use CSV list of tradable assets from different exchanges and segments.

        **Retrieving the full instrument list**:
        Unlike other API calls that return JSON, the instruments API returns a gzipped CSV dump of instruments across all exchanges, which can be imported into a database. The dump is generated once every day, and thus the last_price field is not real-time.

        **Response Structure**:

        | security_id  | security_id. | symbol   | security_description | previous_close | expiry_date | strike_price | tick_size | quantity | option_type | instrument_type | exchange |
        |--------------|--------------|----------|----------------------|----------------|-------------|--------------|-----------|----------|-------------|-----------------|----------|
        | 2000259      | 2000259      | TRENT    | TRENT24FEB3640PE     | 128.75         | 29FEB2024   | 3640.00      | 0.05      | 400.00   | PE          | OPTSTK          | BSEFO    |
        | 2000259      | 2000259      | TRENT    | TRENT24FEB3620CE     | 132.50         | 29FEB2024   | 3620.00      | 0.05      | 300.00   | CE          | OPTSTK          | BSEFO    |
        | 2000260      | 2000259      | INFY     | INFY24FEB2000CE      | 45.80          | 29FEB2024   | 2000.00      | 0.05      | 500.00   | CE          | OPTSTK          | NSEFO      |
        | 2000260      | 2000259      | INFY     | INFY24FEB2100PE      | 50.00          | 29FEB2024   | 2100.00      | 0.05      | 700.00   | PE          | OPTSTK          | NSEFO      |
        | 2000261      | 2000259      | RELIANCE | REL24FEB2500PE       | 73.20          | 29FEB2024   | 2500.00      | 0.05      | 200.00   | PE          | OPTSTK          | NSEFO      |

        `Note:` The CSV file is very large, so this is only a snippet of the CSV response file.











      parameters:
        - name: Api-Version
          in: header
          description: It is necessary to keep API Version as 3 for this version of API.
          required: true
          schema:
            type: string
            default: 3
      


      x-codeSamples:
        - lang: Python
          source: >
            import requests


            url = "https://wss1.mtsp.co.in:16107/instruments"



            headers = {
              'Api-Version': '3',
            }


            response = requests.request("GET", url, headers=headers)


            print(response.text)
        - lang: Node.js
          source: |
            var request = require('request');
            var options = {
              'method': 'GET',
              'url': 'https://wss1.mtsp.co.in:16107/instruments',
              'headers': {
                'Api-Version': '3',
              },
              form: {

              }
            };
            request(options, function (error, response) {
              if (error) throw new Error(error);
              console.log(response.body);
            });
        - lang: curl
          source: |
            curl --location 'https://wss1.mtsp.co.in:16107/instruments' \
            --header 'Api-Version: 3' \

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: here comes the Authorization which is apiKey:token, i.e  ".KAoiU$GCfrrNDN4H|qq<<XtG:9uGleQ4keI9zL!3oZ.9d"
